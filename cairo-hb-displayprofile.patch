*** homebrew/Library/Taps/homebrew/homebrew-core/Formula/cairo.rb	Wed Feb 21 21:39:29 2018
--- homebrew-new/Library/Taps/homebrew/homebrew-core/Formula/cairo.rb	Wed Feb 21 21:38:38 2018
***************
*** 28,33 ****
--- 28,35 ----
    depends_on "pixman"
    depends_on "glib"
  
+   patch :DATA
+ 
    def install
      args = %W[
        --disable-dependency-tracking
***************
*** 86,88 ****
--- 88,223 ----
      system "./test"
    end
  end
+ 
+ __END__
+ diff -rcN cairo-1.14.0/src/cairo-quartz-surface.c cairo-1.14.0.new/src/cairo-quartz-surface.c
+ *** cairo-1.14.12/src/cairo-quartz-surface.c	Mon Dec  4 23:26:24 2017
+ --- cairo-1.14.12-new/src/cairo-quartz-surface.c	Wed Feb 21 21:33:47 2018
+ ***************
+ *** 134,139 ****
+ --- 134,179 ----
+   static void quartz_image_to_png (CGImageRef, char *dest);
+   #endif
+   
+ + 
+ + static CGColorSpaceRef CGColorSpaceCreateDisplayRGB()
+ + {
+ +   //return CGColorSpaceCreateDeviceRGB();
+ +   //return CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
+ +   //return CGColorSpaceCreateWithName(kCGColorSpaceAdobeRGB1998);
+ +   //return CGColorSpaceCreateWithName(kCGColorSpaceGenericRGBLinear);
+ +   //return CGColorSpaceCreateWithName(kCGColorSpaceDCIP3);
+ +   //return NULL;
+ + 
+ +   CGColorSpaceRef result = NULL;
+ + 
+ +   result = CGDisplayCopyColorSpace(CGMainDisplayID());
+ +   if (!result) {
+ +     result = CGColorSpaceCreateDeviceRGB();
+ +   }
+ +   return result;
+ + 
+ + 
+ +   int monitor = 0;
+ +   CGDirectDisplayID ids[monitor + 1];
+ +   uint32_t total_ids;
+ +   CMProfileRef prof = NULL;
+ +   if(CGGetOnlineDisplayList(monitor + 1, &ids[0], &total_ids) == kCGErrorSuccess && total_ids == monitor + 1) {
+ +     CMGetProfileByAVID(ids[monitor], &prof);
+ +     //printf("CGColorSpaceCreateDeviceRGB_test(): AVID=%d\n", (int)ids[monitor]);
+ +   }
+ +   if(prof != NULL) {
+ +     CFDataRef data;
+ +     data = CMProfileCopyICCData(NULL, prof);
+ +     CMCloseProfile(prof);
+ + 
+ +     result = CGColorSpaceCreateWithICCProfile(data);
+ + 
+ +     //printf("CGColorSpaceCreateDeviceRGB_test(): display profile=%p, result=%p\n", (void*)prof, (void*)result);
+ +     CFRelease(data);
+ +   }
+ +   return result;
+ + }
+ + 
+   static cairo_quartz_surface_t *
+   _cairo_quartz_surface_create_internal (CGContextRef cgContext,
+   				       cairo_content_t content,
+ ***************
+ *** 175,181 ****
+       switch (format) {
+   	case CAIRO_FORMAT_ARGB32:
+   	    if (colorSpace == NULL)
+ ! 		colorSpace = CGColorSpaceCreateDeviceRGB ();
+   	    bitinfo |= kCGImageAlphaPremultipliedFirst;
+   	    bitsPerComponent = 8;
+   	    bitsPerPixel = 32;
+ --- 215,221 ----
+       switch (format) {
+   	case CAIRO_FORMAT_ARGB32:
+   	    if (colorSpace == NULL)
+ ! 	      colorSpace = CGColorSpaceCreateDisplayRGB();
+   	    bitinfo |= kCGImageAlphaPremultipliedFirst;
+   	    bitsPerComponent = 8;
+   	    bitsPerPixel = 32;
+ ***************
+ *** 183,189 ****
+   
+   	case CAIRO_FORMAT_RGB24:
+   	    if (colorSpace == NULL)
+ ! 		colorSpace = CGColorSpaceCreateDeviceRGB ();
+   	    bitinfo |= kCGImageAlphaNoneSkipFirst;
+   	    bitsPerComponent = 8;
+   	    bitsPerPixel = 32;
+ --- 223,229 ----
+   
+   	case CAIRO_FORMAT_RGB24:
+   	    if (colorSpace == NULL)
+ !         colorSpace = CGColorSpaceCreateDisplayRGB();
+   	    bitinfo |= kCGImageAlphaNoneSkipFirst;
+   	    bitsPerComponent = 8;
+   	    bitsPerPixel = 32;
+ ***************
+ *** 1407,1413 ****
+       CGContextScaleCTM (state->cgDrawContext, 1, -1);
+   
+       if (state->action == DO_IMAGE) {
+ ! 	CGContextDrawImage (state->cgDrawContext, state->rect, state->image);
+   	if (op == CAIRO_OPERATOR_SOURCE &&
+   	    state->cgDrawContext == state->cgMaskContext)
+   	{
+ --- 1447,1453 ----
+       CGContextScaleCTM (state->cgDrawContext, 1, -1);
+   
+       if (state->action == DO_IMAGE) {
+ !   CGContextDrawImage (state->cgDrawContext, state->rect, state->image);
+   	if (op == CAIRO_OPERATOR_SOURCE &&
+   	    state->cgDrawContext == state->cgMaskContext)
+   	{
+ diff -rcN cairo-1.14.0/src/cairo.c cairo-1.14.0.new/src/cairo.c
+ *** cairo-1.14.0/src/cairo.c	Tue Feb  4 00:07:57 2014
+ --- cairo-1.14.0.new/src/cairo.c	Wed Oct 19 12:50:08 2016
+ ***************
+ *** 107,112 ****
+ --- 107,115 ----
+    * space</firstterm>.
+    **/
+   
+ + int cairo_current_display_id = 0;
+ + 
+ + 
+   #define DEFINE_NIL_CONTEXT(status)					\
+       {									\
+   	CAIRO_REFERENCE_COUNT_INVALID,	/* ref_count */			\
+ diff -rcN cairo-1.14.0/src/cairo.h cairo-1.14.0.new/src/cairo.h
+ *** cairo-1.14.0/src/cairo.h	Fri Mar 14 01:12:43 2014
+ --- cairo-1.14.0.new/src/cairo.h	Wed Oct 19 12:49:53 2016
+ ***************
+ *** 3147,3152 ****
+ --- 3147,3153 ----
+   cairo_public void
+   cairo_debug_reset_static_data (void);
+   
+ + extern int cairo_current_display_id;
+   
+   CAIRO_END_DECLS
+   
